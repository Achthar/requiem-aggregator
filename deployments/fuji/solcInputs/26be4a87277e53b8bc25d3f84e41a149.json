{
  "language": "Solidity",
  "sources": {
    "contracts/backup.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./interfaces/IRequiemRouter02.sol\";\nimport \"./interfaces/IRequiemStableSwap.sol\";\nimport \"./interfaces/IERC20.sol\";\n\ncontract RequiemAggregatorRECENT {\n    address public immutable pairRouter;\n    address public immutable stableRouter;\n\n    constructor(address _pairRouter, address _stableRouter) {\n        pairRouter = _pairRouter;\n        stableRouter = _stableRouter;\n    }\n\n    // standard forward swap function\n    // - in each step the previous output amount is used for the input\n    function multiSwapExactTokensForTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        IERC20(path[0][0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        for (uint i = 0; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, outAmount);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    outAmount,\n                    i < routerId.length - 1 ? 0 : amountOutMin,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, outAmount);\n                uint256[] memory amounts = IRequiemRouter02(pairRouter)\n                    .swapExactTokensForTokens(\n                        outAmount,\n                        i < routerId.length - 1 ? 0 : amountOutMin,\n                        path[i],\n                        address(this),\n                        deadline\n                    );\n                outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping\n    function multiSwapTokensForExactTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        for (uint i = routerId.length - 1; i >= 0; i--) {\n            if (routerId[i] == 0) {\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n                    inIndex,\n                    outIndex,\n                    outAmount\n                );\n                connectingAmounts[i - routerId.length + 1] = outAmount;\n            } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(outAmount, path[i]);\n                connectingAmounts[i - routerId.length + 1] = amountsOut[\n                    amountsOut.length - 1\n                ];\n            }\n        }\n        require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap\n        IERC20(path[0][0]).transferFrom(\n            msg.sender,\n            address(this),\n            connectingAmounts[0]\n        );\n        for (uint i = routerId.length - 1; i >= 0; i--) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    connectingAmounts[i],\n                    0,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n                IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                    connectingAmounts[i],\n                    0,\n                    path[i],\n                    address(this),\n                    deadline\n                );\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, amountOut);\n        return connectingAmounts[0];\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping\n    function multiSwapTokensForExactTokensTest(\n        address[][] calldata path,\n        uint[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        // uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        // for (uint256 i = 0; i <1; i--) {\n            // if (routerId[i] == 0) {\n        //         uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][1]\n        //         );\n        //         uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][0]\n        //         );\n        //         outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n        //             inIndex,\n        //             outIndex,\n        //             outAmount\n        //         );\n        //         // connectingAmounts[i - routerId.length + 1] = outAmount;\n            // } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(outAmount, path[0]);\n                // connectingAmounts[i - routerId.length + 1] = amountsOut[\n                //     amountsOut.length - 1\n                // ];\n            // }\n        // }\n        // require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap\n        // IERC20(path[0][0]).transferFrom(\n        //     msg.sender,\n        //     address(this),\n        //     connectingAmounts[0]\n        // );\n        // for (uint256 i = routerId.length - 1; i > 0; i++) {\n        //     if (routerId[i] == 0) {\n        //         IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n        //         uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][0]\n        //         );\n        //         uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][1]\n        //         );\n        //         IRequiemStableSwap(stableRouter).swap(\n        //             inIndex,\n        //             outIndex,\n        //             connectingAmounts[i],\n        //             0,\n        //             deadline\n        //         );\n        //     } else {\n        //         IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n        //         IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n        //             connectingAmounts[i],\n        //             0,\n        //             path[i],\n        //             address(this),\n        //             deadline\n        //         );\n        //     }\n        // }\n\n        // IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n        //     .transfer(msg.sender, amountOut);\n        return outAmount;\n    }\n\n\n    // Standard forward swap function using the Network CCY as input\n    // Here the first swap is just ExactETHForTokens function\n    // - in each step the previous output amount is used for the input\n    function multiSwapExactETHForTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        (bool sent, ) = pairRouter.call{value: msg.value}(\"\");\n        require(sent, \"FAILED_TO_SEND_ETH\");\n        IRequiemRouter02(pairRouter).swapExactETHForTokens(\n            0,\n            path[0],\n            address(this),\n            deadline\n        );\n        uint256[] memory amounts = IRequiemRouter02(pairRouter)\n            .swapExactETHForTokens(0, path[0], address(this), deadline);\n        uint256 outAmount = amounts[amounts.length - 1];\n        for (uint8 i = 1; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, outAmount);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    outAmount,\n                    i < routerId.length - 1 ? 0 : amountOutMin,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, outAmount);\n                amounts = IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                        outAmount,\n                        i < routerId.length - 1 ? 0 : amountOutMin,\n                        path[i],\n                        address(this),\n                        deadline\n                    );\n                outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping strating with the ExactETHForTokensFunction\n    function multiSwapETHForExactTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n                    inIndex,\n                    outIndex,\n                    outAmount\n                );\n                connectingAmounts[i - routerId.length + 1] = outAmount;\n            } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(amountOut, path[i]);\n                connectingAmounts[i - routerId.length + 1] = amountsOut[\n                    amountsOut.length - 1\n                ];\n            }\n        }\n        require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap, starting with ETH\n        (bool sent, ) = pairRouter.call{value: msg.value}(\"\");\n        require(sent, \"FAILED_TO_SEND_ETH\");\n        IRequiemRouter02(pairRouter).swapExactETHForTokens(\n            0,\n            path[0],\n            address(this),\n            deadline\n        );\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    connectingAmounts[i],\n                    0,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n                IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                    connectingAmounts[i],\n                    0,\n                    path[i],\n                    address(this),\n                    deadline\n                );\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, amountOut);\n        return connectingAmounts[0];\n    }\n\n    // standard forward swap function\n    // - in each step the previous output amount is used for the input\n    function multiSwapExactTokensForETH(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        IERC20(path[0][0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        for (uint8 i = 0; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, outAmount);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    outAmount,\n                    i < routerId.length - 1 ? 0 : amountOutMin,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, outAmount);\n                uint256[] memory amounts = IRequiemRouter02(pairRouter)\n                    .swapExactTokensForTokens(\n                        outAmount,\n                        i < routerId.length - 1 ? 0 : amountOutMin,\n                        path[i],\n                        address(this),\n                        deadline\n                    );\n                outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping\n    function multiSwapTokensForExactETH(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n                    inIndex,\n                    outIndex,\n                    outAmount\n                );\n                connectingAmounts[i - routerId.length + 1] = outAmount;\n            } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(amountOut, path[i]);\n                connectingAmounts[i - routerId.length + 1] = amountsOut[\n                    amountsOut.length - 1\n                ];\n            }\n        }\n        require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap\n        IERC20(path[0][0]).transferFrom(\n            msg.sender,\n            address(this),\n            connectingAmounts[0]\n        );\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    connectingAmounts[i],\n                    0,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n                IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                    connectingAmounts[i],\n                    0,\n                    path[i],\n                    address(this),\n                    deadline\n                );\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, amountOut);\n        return connectingAmounts[0];\n    }\n\n    function multiSwapStructTest(\n        address[] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256 amount) {\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        uint256 i = 0;\n        // for (uint8 i = 0; i < routerId.length; i++) {\n        //     if (routerId[i] == 0) {\n        //         IERC20(path[i][0]).approve(stableRouter, outAmount);\n        //         uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][0]\n        //         );\n        //         uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][1]\n        //         );\n        //         outAmount = _tradeRequiemStables(\n        //             inIndex,\n        //             outIndex,\n        //             outAmount,\n        //             i < routerId.length - 1 ? 0 : amountOutMin,\n        //             deadline\n        //         );\n        //     } else {\n        IERC20(path[0]).approve(pairRouter, outAmount);\n        uint256[] memory amounts = IRequiemRouter02(pairRouter)\n            .swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                address(this),\n                deadline\n            );\n        //     // }\n        // // }\n\n        // IERC20(path[path.length - 1])\n        //     .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    function multiSwapStructView(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external view returns (address[] memory) {\n        // IERC20(path[0][0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        uint256 outLow;\n        for (uint8 i = 0; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                // IERC20(path[i][0]).approve(stableRouter, outAmount);\n                // uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                //     path[i][0]\n                // );\n                // uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                //     path[i][1]\n                // );\n                // outAmount = _tradeRequiemStables(\n                //     inIndex,\n                //     outIndex,\n                //     outAmount,\n                //     i < routerId.length - 1 ? 0 : amountOutMin,\n                //     deadline\n                // );\n            } else {\n                // IERC20(path[i][0]).approve(pairRouter, outAmount);\n                outLow = i < routerId.length - 1 ? 0 : amountOutMin;\n                // uint256[] memory amounts = IRequiemRouter02(pairRouter)\n                //     .swapExactTokensForTokens(\n                //         outAmount,\n                //         i < routerId.length - 1 ? 0 : amountOutMin,\n                //         path[i],\n                //         address(this),\n                //         deadline\n                //     );\n                // outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        // IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n        //     .transfer(msg.sender, outAmount);\n        return (path[0]);\n    }\n}\n"
    },
    "contracts/interfaces/IRequiemRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\nimport \"./IRequiemRouter01.sol\";\n\ninterface IRequiemRouter02 is IRequiemRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/IRequiemStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IRequiemStableSwap {\n    /// EVENTS\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 soldId,\n        uint256 tokensSold,\n        uint256 boughtId,\n        uint256 tokensBought\n    );\n\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\n\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\n\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 tokenSupply\n    );\n\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\n\n    event StopRampA(uint256 A, uint256 timestamp);\n\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\n\n    event CollectProtocolFee(address token, uint256 amount);\n\n    event FeeControllerChanged(address newController);\n\n    event FeeDistributorChanged(address newController);\n\n    // pool data view functions\n    function getLpToken() external view returns (IERC20 lpToken);\n\n    function getA() external view returns (uint256);\n\n    function getAPrecise() external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (IERC20);\n\n    function getTokens() external view returns (IERC20[] memory);\n\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getTokenBalances() external view returns (uint256[] memory);\n\n    function getNumberOfTokens() external view returns (uint256);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\n\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\n\n    function calculateRemoveLiquidityOneToken(\n        address account,\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256 availableTokenAmount);\n\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\n\n    function getAdminBalance(uint8 index) external view returns (uint256);\n\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\n\n    // state modifying functions\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/IRequiemRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\ninterface IRequiemRouter01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/RequiemAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./interfaces/IRequiemRouter02.sol\";\nimport \"./interfaces/IRequiemStableSwap.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract RequiemAggregator {\n    address public immutable pairRouter;\n    address public immutable stableRouter;\n    address public immutable WETH;\n\n    constructor(\n        address _pairRouter,\n        address _stableRouter,\n        address _WETH\n    ) {\n        pairRouter = _pairRouter;\n        stableRouter = _stableRouter;\n        WETH = _WETH;\n    }\n\n    // standard forward swap function\n    // - in each step the previous output amount is used for the input\n    function multiSwapExactTokensForTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        IERC20(path[0][0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        for (uint256 i = 0; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, outAmount);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    outAmount,\n                    i < routerId.length - 1 ? 0 : amountOutMin,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, outAmount);\n                uint256[] memory amounts = IRequiemRouter02(pairRouter)\n                    .swapExactTokensForTokens(\n                        outAmount,\n                        i < routerId.length - 1 ? 0 : amountOutMin,\n                        path[i],\n                        address(this),\n                        deadline\n                    );\n                outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping\n    function multiSwapTokensForExactTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        for (uint256 i = routerId.length; i > 0; i--) {\n            if (routerId[i - 1] == 0) {\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i - 1][1]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i - 1][0]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n                    inIndex,\n                    outIndex,\n                    outAmount\n                );\n                connectingAmounts[i - 1] = outAmount;\n            } else {\n                uint256[] memory amountsIn = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(outAmount, path[i - 1]);\n                connectingAmounts[i - 1] = amountsIn[0];\n            }\n        }\n        require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap\n        IERC20(path[0][0]).transferFrom(\n            msg.sender,\n            address(this),\n            connectingAmounts[0]\n        );\n        for (uint256 i = 0; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    connectingAmounts[i],\n                    0,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n                IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                    connectingAmounts[i],\n                    0,\n                    path[i],\n                    address(this),\n                    deadline\n                );\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, amountOut);\n        return connectingAmounts[0];\n    }\n\n    // Standard forward swap function using the Network CCY as input\n    // Here the first action is a WETH deposit\n    // - in each step the previous output amount is used for the input\n    function multiSwapExactETHForTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory amounts = IRequiemRouter02(pairRouter).getAmountsOut(\n            msg.value,\n            path[0]\n        );\n        IWETH(WETH).deposit{value: amounts[0]}();\n        IERC20(WETH).approve(pairRouter, amounts[0]);\n        amounts = IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n            amounts[0],\n            0,\n            path[0],\n            address(this),\n            deadline\n        );\n\n        uint256 outAmount = amounts[amounts.length - 1];\n        for (uint8 i = 1; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, outAmount);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    outAmount,\n                    i < routerId.length - 1 ? 0 : amountOutMin,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, outAmount);\n                amounts = IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                        outAmount,\n                        i < routerId.length - 1 ? 0 : amountOutMin,\n                        path[i],\n                        address(this),\n                        deadline\n                    );\n                outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then depositing ETHG / receiving WETH\n    // - then forward swapping\n    function multiSwapETHForExactTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n                    inIndex,\n                    outIndex,\n                    outAmount\n                );\n                connectingAmounts[i - routerId.length + 1] = outAmount;\n            } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(amountOut, path[i]);\n                connectingAmounts[i - routerId.length + 1] = amountsOut[\n                    amountsOut.length - 1\n                ];\n            }\n        }\n        require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap, starting with ETH\n        IWETH(WETH).deposit{value: connectingAmounts[0]}();\n        IERC20(WETH).approve(pairRouter, connectingAmounts[0]);\n        IRequiemRouter02(pairRouter).swapExactETHForTokens(\n            0,\n            path[0],\n            address(this),\n            deadline\n        );\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    connectingAmounts[i],\n                    0,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n                IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                    connectingAmounts[i],\n                    0,\n                    path[i],\n                    address(this),\n                    deadline\n                );\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, amountOut);\n        return connectingAmounts[0];\n    }\n\n    // standard forward swap function that returns ETH\n    // - in each step the previous output amount is used for the input\n    function multiSwapExactTokensForETH(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        IERC20(path[0][0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        for (uint8 i = 0; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, outAmount);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    outAmount,\n                    i < routerId.length - 1 ? 0 : amountOutMin,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, outAmount);\n                uint256[] memory amounts = IRequiemRouter02(pairRouter)\n                    .swapExactTokensForTokens(\n                        outAmount,\n                        i < routerId.length - 1 ? 0 : amountOutMin,\n                        path[i],\n                        address(this),\n                        deadline\n                    );\n                outAmount = amounts[amounts.length - 1];\n            }\n        }\n        IWETH(WETH).approve(address(this), outAmount);\n        require(false, \"HERE0\");\n        IWETH(WETH).withdraw(outAmount);\n        TransferHelper.safeTransferETH(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    function testWAVAX() external payable {\n        IWETH(IRequiemRouter02(pairRouter).WETH()).deposit{value: msg.value}();\n        IWETH(IRequiemRouter02(pairRouter).WETH()).withdraw(msg.value);\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping\n    function multiSwapTokensForExactETH(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n                    inIndex,\n                    outIndex,\n                    outAmount\n                );\n                connectingAmounts[i - routerId.length + 1] = outAmount;\n            } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(amountOut, path[i]);\n                connectingAmounts[i - routerId.length + 1] = amountsOut[\n                    amountsOut.length - 1\n                ];\n            }\n        }\n        require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap\n        IERC20(path[0][0]).transferFrom(\n            msg.sender,\n            address(this),\n            connectingAmounts[0]\n        );\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    connectingAmounts[i],\n                    0,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n                IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                    connectingAmounts[i],\n                    0,\n                    path[i],\n                    address(this),\n                    deadline\n                );\n            }\n        }\n\n        IWETH(IRequiemRouter02(pairRouter).WETH()).withdraw(amountOut);\n        TransferHelper.safeTransferETH(msg.sender, amountOut);\n        return connectingAmounts[0];\n    }\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n    function balanceOf(address account) external view returns (uint256);\n    function approve(address guy, uint wad) external returns (bool);\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "contracts/tokens/LPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport \"../libraries/ERC20Burnable.sol\";\nimport \"../libraries/Ownable.sol\";\nimport \"../interfaces/IRequiemStableSwap.sol\";\n\ncontract LPToken is Ownable, ERC20Burnable {\n    IRequiemStableSwap public swap;\n\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        swap = IRequiemStableSwap(msg.sender);\n    }\n\n    function mint(address _to, uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"zeroMintAmount\");\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20) {\n        super._beforeTokenTransfer(from, to, amount);\n        swap.updateUserWithdrawFee(to, amount);\n    }\n}\n"
    },
    "contracts/libraries/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(\n            currentAllowance >= amount,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/libraries/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
    },
    "contracts/libraries/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
    },
    "contracts/libraries/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../libraries/ERC20.sol\";\n\n/**\n * @dev THIS CONTRACT IS FOR TESTING PURPOSES ONLY.\n */\ncontract MockERC20 is ERC20 {\n    uint8 internal decimals_;\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) ERC20(_name, _symbol) {\n        super._mint(msg.sender, 1e27);\n        decimals_ = _decimals;\n    }\n\n    function mint(address _receiver, uint256 _amount) external {\n        _mint(_receiver, _amount);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return decimals_;\n    }\n}\n"
    },
    "contracts/libraries/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}"
    },
    "contracts/base/OwnerPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"../libraries/Ownable.sol\";\nimport \"../libraries/Pausable.sol\";\n\nabstract contract OwnerPausable is Ownable, Pausable {\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/old.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./interfaces/IRequiemRouter02.sol\";\nimport \"./interfaces/IRequiemStableSwap.sol\";\nimport \"./interfaces/IERC20.sol\";\n\ncontract RequiemAggregatorOLD {\n    address public immutable pairRouter;\n    address public immutable stableRouter;\n\n    constructor(address _pairRouter, address _stableRouter) {\n        pairRouter = _pairRouter;\n        stableRouter = _stableRouter;\n    }\n\n    // standard forward swap function\n    // - in each step the previous output amount is used for the input\n    function multiSwapExactTokensForTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        IERC20(path[0][0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        for (uint i = 0; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, outAmount);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    outAmount,\n                    i < routerId.length - 1 ? 0 : amountOutMin,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, outAmount);\n                uint256[] memory amounts = IRequiemRouter02(pairRouter)\n                    .swapExactTokensForTokens(\n                        outAmount,\n                        i < routerId.length - 1 ? 0 : amountOutMin,\n                        path[i],\n                        address(this),\n                        deadline\n                    );\n                outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping\n    function multiSwapTokensForExactTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        for (uint i = routerId.length - 1; i >= 0; i--) {\n            if (routerId[i] == 0) {\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n                    inIndex,\n                    outIndex,\n                    outAmount\n                );\n                connectingAmounts[i - routerId.length + 1] = outAmount;\n            } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(outAmount, path[i]);\n                connectingAmounts[i - routerId.length + 1] = amountsOut[\n                    amountsOut.length - 1\n                ];\n            }\n        }\n        require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap\n        IERC20(path[0][0]).transferFrom(\n            msg.sender,\n            address(this),\n            connectingAmounts[0]\n        );\n        for (uint i = routerId.length - 1; i >= 0; i--) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    connectingAmounts[i],\n                    0,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n                IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                    connectingAmounts[i],\n                    0,\n                    path[i],\n                    address(this),\n                    deadline\n                );\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, amountOut);\n        return connectingAmounts[0];\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping\n    function multiSwapTokensForExactTokensTest(\n        address[][] calldata path,\n        uint[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        // uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        // for (uint256 i = 0; i <1; i--) {\n            // if (routerId[i] == 0) {\n        //         uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][1]\n        //         );\n        //         uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][0]\n        //         );\n        //         outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n        //             inIndex,\n        //             outIndex,\n        //             outAmount\n        //         );\n        //         // connectingAmounts[i - routerId.length + 1] = outAmount;\n            // } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(outAmount, path[0]);\n                // connectingAmounts[i - routerId.length + 1] = amountsOut[\n                //     amountsOut.length - 1\n                // ];\n            // }\n        // }\n        // require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap\n        // IERC20(path[0][0]).transferFrom(\n        //     msg.sender,\n        //     address(this),\n        //     connectingAmounts[0]\n        // );\n        // for (uint256 i = routerId.length - 1; i > 0; i++) {\n        //     if (routerId[i] == 0) {\n        //         IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n        //         uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][0]\n        //         );\n        //         uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][1]\n        //         );\n        //         IRequiemStableSwap(stableRouter).swap(\n        //             inIndex,\n        //             outIndex,\n        //             connectingAmounts[i],\n        //             0,\n        //             deadline\n        //         );\n        //     } else {\n        //         IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n        //         IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n        //             connectingAmounts[i],\n        //             0,\n        //             path[i],\n        //             address(this),\n        //             deadline\n        //         );\n        //     }\n        // }\n\n        // IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n        //     .transfer(msg.sender, amountOut);\n        return outAmount;\n    }\n\n\n    // Standard forward swap function using the Network CCY as input\n    // Here the first swap is just ExactETHForTokens function\n    // - in each step the previous output amount is used for the input\n    function multiSwapExactETHForTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        (bool sent, ) = pairRouter.call{value: msg.value}(\"\");\n        require(sent, \"FAILED_TO_SEND_ETH\");\n        IRequiemRouter02(pairRouter).swapExactETHForTokens(\n            0,\n            path[0],\n            address(this),\n            deadline\n        );\n        uint256[] memory amounts = IRequiemRouter02(pairRouter)\n            .swapExactETHForTokens(0, path[0], address(this), deadline);\n        uint256 outAmount = amounts[amounts.length - 1];\n        for (uint8 i = 1; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, outAmount);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    outAmount,\n                    i < routerId.length - 1 ? 0 : amountOutMin,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, outAmount);\n                amounts = IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                        outAmount,\n                        i < routerId.length - 1 ? 0 : amountOutMin,\n                        path[i],\n                        address(this),\n                        deadline\n                    );\n                outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping strating with the ExactETHForTokensFunction\n    function multiSwapETHForExactTokens(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n                    inIndex,\n                    outIndex,\n                    outAmount\n                );\n                connectingAmounts[i - routerId.length + 1] = outAmount;\n            } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(amountOut, path[i]);\n                connectingAmounts[i - routerId.length + 1] = amountsOut[\n                    amountsOut.length - 1\n                ];\n            }\n        }\n        require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap, starting with ETH\n        (bool sent, ) = pairRouter.call{value: msg.value}(\"\");\n        require(sent, \"FAILED_TO_SEND_ETH\");\n        IRequiemRouter02(pairRouter).swapExactETHForTokens(\n            0,\n            path[0],\n            address(this),\n            deadline\n        );\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    connectingAmounts[i],\n                    0,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n                IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                    connectingAmounts[i],\n                    0,\n                    path[i],\n                    address(this),\n                    deadline\n                );\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, amountOut);\n        return connectingAmounts[0];\n    }\n\n    // standard forward swap function\n    // - in each step the previous output amount is used for the input\n    function multiSwapExactTokensForETH(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        IERC20(path[0][0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        for (uint8 i = 0; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, outAmount);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    outAmount,\n                    i < routerId.length - 1 ? 0 : amountOutMin,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, outAmount);\n                uint256[] memory amounts = IRequiemRouter02(pairRouter)\n                    .swapExactTokensForTokens(\n                        outAmount,\n                        i < routerId.length - 1 ? 0 : amountOutMin,\n                        path[i],\n                        address(this),\n                        deadline\n                    );\n                outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    // classic swap tokens for exact tokens function\n    // - first calculating the input amounts\n    // - then forward swapping\n    function multiSwapTokensForExactETH(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        uint256[] memory connectingAmounts = new uint256[](path.length);\n        // calculate amounts\n        uint256 outAmount = amountOut;\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                outAmount = IRequiemStableSwap(stableRouter).calculateSwap(\n                    inIndex,\n                    outIndex,\n                    outAmount\n                );\n                connectingAmounts[i - routerId.length + 1] = outAmount;\n            } else {\n                uint256[] memory amountsOut = IRequiemRouter02(pairRouter)\n                    .getAmountsIn(amountOut, path[i]);\n                connectingAmounts[i - routerId.length + 1] = amountsOut[\n                    amountsOut.length - 1\n                ];\n            }\n        }\n        require(connectingAmounts[0] <= amountInMax, \"INSUFFICIENT_INPUT\");\n        // then forward swap\n        IERC20(path[0][0]).transferFrom(\n            msg.sender,\n            address(this),\n            connectingAmounts[0]\n        );\n        for (uint256 i = routerId.length - 1; i > 0; i++) {\n            if (routerId[i] == 0) {\n                IERC20(path[i][0]).approve(stableRouter, connectingAmounts[0]);\n                uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][0]\n                );\n                uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                    path[i][1]\n                );\n                IRequiemStableSwap(stableRouter).swap(\n                    inIndex,\n                    outIndex,\n                    connectingAmounts[i],\n                    0,\n                    deadline\n                );\n            } else {\n                IERC20(path[i][0]).approve(pairRouter, connectingAmounts[i]);\n                IRequiemRouter02(pairRouter).swapExactTokensForTokens(\n                    connectingAmounts[i],\n                    0,\n                    path[i],\n                    address(this),\n                    deadline\n                );\n            }\n        }\n\n        IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n            .transfer(msg.sender, amountOut);\n        return connectingAmounts[0];\n    }\n\n    function multiSwapStructTest(\n        address[] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external payable returns (uint256 amount) {\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        uint256 i = 0;\n        // for (uint8 i = 0; i < routerId.length; i++) {\n        //     if (routerId[i] == 0) {\n        //         IERC20(path[i][0]).approve(stableRouter, outAmount);\n        //         uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][0]\n        //         );\n        //         uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n        //             path[i][1]\n        //         );\n        //         outAmount = _tradeRequiemStables(\n        //             inIndex,\n        //             outIndex,\n        //             outAmount,\n        //             i < routerId.length - 1 ? 0 : amountOutMin,\n        //             deadline\n        //         );\n        //     } else {\n        IERC20(path[0]).approve(pairRouter, outAmount);\n        uint256[] memory amounts = IRequiemRouter02(pairRouter)\n            .swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                path,\n                address(this),\n                deadline\n            );\n        //     // }\n        // // }\n\n        // IERC20(path[path.length - 1])\n        //     .transfer(msg.sender, outAmount);\n        return outAmount;\n    }\n\n    function multiSwapStructView(\n        address[][] calldata path,\n        uint256[] memory routerId,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external view returns (address[] memory) {\n        // IERC20(path[0][0]).transferFrom(msg.sender, address(this), amountIn);\n        uint256 outAmount = amountIn;\n        uint256 outLow;\n        for (uint8 i = 0; i < routerId.length; i++) {\n            if (routerId[i] == 0) {\n                // IERC20(path[i][0]).approve(stableRouter, outAmount);\n                // uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                //     path[i][0]\n                // );\n                // uint8 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\n                //     path[i][1]\n                // );\n                // outAmount = _tradeRequiemStables(\n                //     inIndex,\n                //     outIndex,\n                //     outAmount,\n                //     i < routerId.length - 1 ? 0 : amountOutMin,\n                //     deadline\n                // );\n            } else {\n                // IERC20(path[i][0]).approve(pairRouter, outAmount);\n                outLow = i < routerId.length - 1 ? 0 : amountOutMin;\n                // uint256[] memory amounts = IRequiemRouter02(pairRouter)\n                //     .swapExactTokensForTokens(\n                //         outAmount,\n                //         i < routerId.length - 1 ? 0 : amountOutMin,\n                //         path[i],\n                //         address(this),\n                //         deadline\n                //     );\n                // outAmount = amounts[amounts.length - 1];\n            }\n        }\n\n        // IERC20(path[path.length - 1][path[path.length - 1].length - 1])\n        //     .transfer(msg.sender, outAmount);\n        return (path[0]);\n    }\n}\n"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "contracts/libraries/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "contracts/interfaces/IRewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IRewardToken is IERC20 {\n    function mint(address _recipient, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IRewarder {\n\n    function onReward(uint256 pid, address user, address recipient, uint256 rewardAmount, uint256 newLpAmount) external;\n    function pendingTokens(uint256 pid, address user, uint256 rewardAmount) external view returns (IERC20[] memory, uint256[] memory);\n}\n"
    },
    "contracts/interfaces/IMiniChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\nimport \"./IERC20.sol\";\n\ninterface IMiniChefV2 {\n    function lpToken(uint256 _pid) external view returns (IERC20);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}