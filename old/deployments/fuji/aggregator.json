{
  "address": "0xC05E74836C708E4dB327218Be3B22453f21156AF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "multiSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "stableIndxesInPath",
          "type": "uint8[]"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x75d8bc72ff1c8c489bc5c3c8e43b28aada3fe37e2af7db6b6c4aa305853e82b0",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0xC05E74836C708E4dB327218Be3B22453f21156AF",
    "transactionIndex": 0,
    "gasUsed": "765728",
    "logsBloom": "0x
    "blockHash": "0xc09c1ff22faf94e242a4d933e5f86648aff8154a46fd7406828c00b17005d274",
    "transactionHash": "0x75d8bc72ff1c8c489bc5c3c8e43b28aada3fe37e2af7db6b6c4aa305853e82b0",
    "logs": [],
    "blockNumber": 2271480,
    "cumulativeGasUsed": "765728",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2a90276992ddC21C3585FE50f5B43D0Cf62aDe03",
    "0x9067e2C2bf8531283AB97C34EaA74599E0004842"
  ],
  "solcInputHash": "2e40cafc349deb16eade5e2a7d51781c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"multiSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"stableIndxesInPath\",\"type\":\"uint8[]\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemAggregator.sol\":\"RequiemAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RequiemAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/IRequiemRouter02.sol\\\";\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract RequiemAggregator {\\n    address public immutable pairRouter;\\n    address public immutable stableRouter;\\n\\n    constructor(address _pairRouter, address _stableRouter) {\\n        pairRouter = _pairRouter;\\n        stableRouter = _stableRouter;\\n    }\\n\\n    // function swapExactTokensForTokens(\\n    //     address[] memory path,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address to,\\n    //     uint256 deadline,\\n    //     uint8[] memory stableIndxesInPath\\n    // ) public {\\n    //     uint8 inIndex;\\n    //     uint8 outIndex;\\n    //     uint256 currentInAmount = amountIn;\\n    //     uint8 currenStableIndex = 0;\\n\\n    //     for (uint8 i = 0; i < path.length - 1; i++) {\\n    //         if (i == stableIndxesInPath[currenStableIndex]) {\\n    //             // 1) transaction through pairs\\n    //             if (i != 0) {\\n    //                 address[] memory localPath = new address[](\\n    //                     i - currenStableIndex + 1\\n    //                 );\\n    //                 // create local path for execution\\n    //                 for (\\n    //                     uint8 j = currenStableIndex > 0\\n    //                         ? stableIndxesInPath[currenStableIndex - 1] + 1\\n    //                         : 0;\\n    //                     j <= i;\\n    //                     j++\\n    //                 ) {\\n    //                     localPath[j] = path[j];\\n    //                 }\\n\\n    //                 //uint256[] memory currentAmounts = new uint256[](i - currenStableIndex + 1);\\n\\n    //                 uint256[] memory currentAmounts = IRequiemRouter02(\\n    //                     pairRouter\\n    //                 ).swapTokensForExactTokens(\\n    //                         currentInAmount,\\n    //                         i == path.length - 2 ? amountOutMin : 0,\\n    //                         localPath,\\n    //                         to,\\n    //                         deadline\\n    //                     );\\n\\n    //                 currentInAmount = currentAmounts[currentAmounts.length - 1];\\n    //             } else {\\n    //                 // if first trade is stableswap\\n\\n    //                 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\\n    //                     path[0]\\n    //                 );\\n    //                 outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\\n    //                     path[1]\\n    //                 );\\n\\n    //                 // uint256 minOut = IRequiemStableSwap(stableRouter).calculateSwap(inIndex, outIndex, dx);\\n\\n    //                 currentInAmount = IRequiemStableSwap(stableRouter).swap(\\n    //                     inIndex,\\n    //                     outIndex,\\n    //                     currentInAmount,\\n    //                     0,\\n    //                     deadline\\n    //                 );\\n    //             }\\n\\n    //             // execute the stableSwap transaction\\n\\n    //             inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\\n    //                 path[i]\\n    //             );\\n    //             outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(\\n    //                 path[i + 1]\\n    //             );\\n\\n    //             currentInAmount = IRequiemStableSwap(stableRouter).swap(\\n    //                 inIndex,\\n    //                 outIndex,\\n    //                 currentInAmount,\\n    //                 i == path.length - 2 ? amountOutMin : 0,\\n    //                 deadline\\n    //             );\\n\\n    //             currenStableIndex += 1;\\n    //         }\\n    //     }\\n    // }\\n\\n    function swapExactTokensForTokens(\\n        address[] memory path,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline,\\n        uint8[] memory stableIndxesInPath\\n    ) public {\\n        uint8 inIndex;\\n        uint8 outIndex;\\n        uint256 currentInAmount = amountIn;\\n        uint8 currenStableIndex = 0;\\n\\n        (bool a, bytes memory outAmount) = stableRouter.delegatecall(\\n            abi.encodeWithSignature(\\\"swap(uint8,uint8,uint256,uint256,uint256\\\",  \\n            inIndex,\\n            outIndex,\\n            currentInAmount,\\n            0,\\n            deadline));\\n\\n        address[] memory localPath = new address[](2);\\n        localPath[0] = path[1];\\n        localPath[1] = path[2];\\n\\n        (bool b, bytes memory outAmountFinal) = pairRouter.delegatecall(\\n            abi.encodeWithSignature(\\\"swapTokensForExactTokens(uint,uint,address[],address,uint\\\", \\n            outAmount,\\n            amountOutMin,\\n            localPath,\\n            to,\\n            deadline));\\n\\n        // // if first trade is stableswap\\n        // IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\\n        // IERC20(path[0]).approve(address(this), amountIn);\\n\\n        // IERC20(path[0]).approve(stableRouter, amountIn);\\n\\n        // inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(path[0]);\\n        // outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(path[1]);\\n        // currentInAmount = IRequiemStableSwap(stableRouter).swap(\\n        //     inIndex,\\n        //     outIndex,\\n        //     currentInAmount,\\n        //     0,\\n        //     deadline\\n        // );\\n   \\n        // // net trade is regular\\n        // IRequiemRouter02(pairRouter).swapTokensForExactTokens(\\n        //     currentInAmount,\\n        //     amountOutMin,\\n        //     localPath,\\n        //     to,\\n        //     deadline\\n        // );\\n    }\\n\\n\\nfunction _tradeOnRequiem(uint256 amountIn, address[] memory path, uint256 amountOutMin, uint256 deadline) private returns(uint amount){\\n    address recipient = address(this);\\n      \\n    uint256[] memory amounts =  IRequiemRouter02(pairRouter).swapExactTokensForTokens(\\n        amountIn,\\n        amountOutMin,\\n        path,\\n        recipient,\\n        deadline\\n    );\\n\\n    return amounts[amounts.length-1];\\n}\\n\\n// function _getPathForSushiSwap() private pure returns (address[] memory) {\\n//     address[] memory path = new address[](2);\\n//     path[0] = 0xffb3ed4960cac85372e6838fbc9ce47bcf2d073e;\\n//     path[1] = 0xca9ec7085ed564154a9233e1e7d8fef460438eea;\\n    \\n//     return path;\\n// }\\n\\nfunction _tradeRequiemStables(\\n    uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        uint256 deadline) private returns (uint256 amount){\\n            \\n    address recipient = address(this);\\n      \\n    return IRequiemStableSwap(stableRouter).swap(\\n        fromIndex,\\n        toIndex,\\n        inAmount,\\n        minOutAmount,\\n        deadline\\n    );\\n}\\n\\n    function multiSwap(address[] memory path, uint256 amountIn, uint256 amountOutMin,uint256 deadline) external payable {\\n\\n    uint256 amountOutMinBridge = 1;\\n    uint8 inIndex = IRequiemStableSwap(stableRouter).getTokenIndex(path[0]);\\n    uint8  outIndex = IRequiemStableSwap(stableRouter).getTokenIndex(path[1]);\\n    uint256 outStable = _tradeRequiemStables(inIndex, outIndex,amountIn, amountOutMinBridge, deadline);\\n    address[] memory pathEnd = new address[](2);\\n    pathEnd[0] = path[1];\\n    pathEnd[1] = path[2];\\n    (uint256  amounts) =_tradeOnRequiem(outStable, path, amountOutMin, deadline);\\n   \\n}\\n\\n}\\n\",\"keccak256\":\"0xa40c48d67d5b77f5592de0e84bcc34a90175210e14237478ac4aba93d7e7746d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb55c91551ef864f86edd296378fc3430f19798c0d1de468ff772a83a842df24c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\ninterface IRequiemRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x68bc82bec66ed8e8b6e24f794544c66d3494203713df80924346886eec33b4b4\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IRequiemRouter01.sol\\\";\\n\\ninterface IRequiemRouter02 is IRequiemRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd5795df9e18190298786b5d2fe35647742d900dfadded791652160e73fac2f6c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 soldId,\\n        uint256 tokensSold,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0x121eb6c1c2b8664595b880ebaa7096caf3a4883d65ef8a06a1eee63f83e7a032\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610dcc380380610dcc83398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c610cde6100ee60003960008181605601528181610107015281816101de0152818161041201526106b101526000818160bb015281816105ad015261075e0152610cde6000f3fe60806040526004361061003f5760003560e01c80634c3677c81461004457806356089a7c14610094578063866cb90d146100a95780639a38818c146100dd575b600080fd5b34801561005057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100a76100a23660046109b7565b6100fd565b005b3480156100b557600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b3480156100e957600080fd5b506100a76100f83660046108c6565b6103d5565b60006001905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366c0bd248760008151811061015557634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161018891906001600160a01b0391909116815260200190565b60206040518083038186803b1580156101a057600080fd5b505afa1580156101b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d89190610ab4565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366c0bd248860018151811061022c57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161025f91906001600160a01b0391909116815260200190565b60206040518083038186803b15801561027757600080fd5b505afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af9190610ab4565b905060006102c08383898789610677565b60408051600280825260608201835292935060009290916020830190803683370190505090508860018151811061030757634e487b7160e01b600052603260045260246000fd5b60200260200101518160008151811061033057634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508860028151811061037157634e487b7160e01b600052603260045260246000fd5b60200260200101518160018151811061039a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060006103c8838b8a8a610740565b5050505050505050505050565b60405160006024820181905260448201819052606482018790526084820181905260a4820184905290819087908290819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169060c40160408051601f198184030181529181526020820180516001600160e01b031663383aef7760e21b1790525161046b9190610b1a565b600060405180830381855af49150503d80600081146104a6576040519150601f19603f3d011682016040523d82523d6000602084013e6104ab565b606091505b50604080516002808252606082018352939550919350600092906020830190803683370190505090508c6001815181106104f557634e487b7160e01b600052603260045260246000fd5b60200260200101518160008151811061051e57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508c60028151811061055f57634e487b7160e01b600052603260045260246000fd5b60200260200101518160018151811061058857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848e858f8f6040516024016105ee959493929190610b36565b60408051601f198184030181529181526020820180516001600160e01b031663556585b560e11b179052516106239190610b1a565b600060405180830381855af49150503d806000811461065e576040519150601f19603f3d011682016040523d82523d6000602084013e610663565b606091505b505050505050505050505050505050505050565b6040516348b4aac360e11b815260ff80871660048301528516602482015260448101849052606481018390526084810182905260009030907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063916955869060a401602060405180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190610a9c565b979650505050505050565b6040516338ed173960e01b8152600090309082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906338ed17399061079b908a9089908b9088908b90600401610b9c565b600060405180830381600087803b1580156107b557600080fd5b505af11580156107c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107f19190810190610a09565b905080600182516108029190610c2d565b8151811061082057634e487b7160e01b600052603260045260246000fd5b602002602001015192505050949350505050565b80356001600160a01b038116811461084b57600080fd5b919050565b600082601f830112610860578081fd5b8135602061087561087083610c09565b610bd8565b80838252828201915082860187848660051b8901011115610894578586fd5b855b858110156108b9576108a782610834565b84529284019290840190600101610896565b5090979650505050505050565b60008060008060008060c087890312156108de578182fd5b863567ffffffffffffffff808211156108f5578384fd5b6109018a838b01610850565b9750602091508189013596506040890135955061092060608a01610834565b94506080890135935060a08901358181111561093a578384fd5b89019050601f81018a1361094c578283fd5b803561095a61087082610c09565b8082825284820191508484018d868560051b8701011115610979578687fd5b8694505b838510156109a457803561099081610c96565b83526001949094019391850191850161097d565b5080955050505050509295509295509295565b600080600080608085870312156109cc578384fd5b843567ffffffffffffffff8111156109e2578485fd5b6109ee87828801610850565b97602087013597506040870135966060013595509350505050565b60006020808385031215610a1b578182fd5b825167ffffffffffffffff811115610a31578283fd5b8301601f81018513610a41578283fd5b8051610a4f61087082610c09565b80828252848201915084840188868560051b8701011115610a6e578687fd5b8694505b83851015610a90578051835260019490940193918501918501610a72565b50979650505050505050565b600060208284031215610aad578081fd5b5051919050565b600060208284031215610ac5578081fd5b8151610ad081610c96565b9392505050565b6000815180845260208085019450808401835b83811015610b0f5781516001600160a01b031687529582019590820190600101610aea565b509495945050505050565b60008251610b2c818460208701610c50565b9190910192915050565b60a08152600086518060a0840152610b558160c0850160208b01610c50565b60208301879052601f01601f1916820182810360c09081016040850152610b7e90820187610ad7565b6001600160a01b039590951660608401525050608001529392505050565b85815284602082015260a060408201526000610bbb60a0830186610ad7565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c0157610c01610c80565b604052919050565b600067ffffffffffffffff821115610c2357610c23610c80565b5060051b60200190565b600082821015610c4b57634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015610c6b578181015183820152602001610c53565b83811115610c7a576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b60ff81168114610ca557600080fd5b5056fea26469706673582212203b2ad4432e31c849afc9dcdc1750885f0e512d752cc2228c89251fcd988f97f664736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80634c3677c81461004457806356089a7c14610094578063866cb90d146100a95780639a38818c146100dd575b600080fd5b34801561005057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100a76100a23660046109b7565b6100fd565b005b3480156100b557600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b3480156100e957600080fd5b506100a76100f83660046108c6565b6103d5565b60006001905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366c0bd248760008151811061015557634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161018891906001600160a01b0391909116815260200190565b60206040518083038186803b1580156101a057600080fd5b505afa1580156101b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d89190610ab4565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366c0bd248860018151811061022c57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161025f91906001600160a01b0391909116815260200190565b60206040518083038186803b15801561027757600080fd5b505afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af9190610ab4565b905060006102c08383898789610677565b60408051600280825260608201835292935060009290916020830190803683370190505090508860018151811061030757634e487b7160e01b600052603260045260246000fd5b60200260200101518160008151811061033057634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508860028151811061037157634e487b7160e01b600052603260045260246000fd5b60200260200101518160018151811061039a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060006103c8838b8a8a610740565b5050505050505050505050565b60405160006024820181905260448201819052606482018790526084820181905260a4820184905290819087908290819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169060c40160408051601f198184030181529181526020820180516001600160e01b031663383aef7760e21b1790525161046b9190610b1a565b600060405180830381855af49150503d80600081146104a6576040519150601f19603f3d011682016040523d82523d6000602084013e6104ab565b606091505b50604080516002808252606082018352939550919350600092906020830190803683370190505090508c6001815181106104f557634e487b7160e01b600052603260045260246000fd5b60200260200101518160008151811061051e57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508c60028151811061055f57634e487b7160e01b600052603260045260246000fd5b60200260200101518160018151811061058857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848e858f8f6040516024016105ee959493929190610b36565b60408051601f198184030181529181526020820180516001600160e01b031663556585b560e11b179052516106239190610b1a565b600060405180830381855af49150503d806000811461065e576040519150601f19603f3d011682016040523d82523d6000602084013e610663565b606091505b505050505050505050505050505050505050565b6040516348b4aac360e11b815260ff80871660048301528516602482015260448101849052606481018390526084810182905260009030907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063916955869060a401602060405180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190610a9c565b979650505050505050565b6040516338ed173960e01b8152600090309082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906338ed17399061079b908a9089908b9088908b90600401610b9c565b600060405180830381600087803b1580156107b557600080fd5b505af11580156107c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107f19190810190610a09565b905080600182516108029190610c2d565b8151811061082057634e487b7160e01b600052603260045260246000fd5b602002602001015192505050949350505050565b80356001600160a01b038116811461084b57600080fd5b919050565b600082601f830112610860578081fd5b8135602061087561087083610c09565b610bd8565b80838252828201915082860187848660051b8901011115610894578586fd5b855b858110156108b9576108a782610834565b84529284019290840190600101610896565b5090979650505050505050565b60008060008060008060c087890312156108de578182fd5b863567ffffffffffffffff808211156108f5578384fd5b6109018a838b01610850565b9750602091508189013596506040890135955061092060608a01610834565b94506080890135935060a08901358181111561093a578384fd5b89019050601f81018a1361094c578283fd5b803561095a61087082610c09565b8082825284820191508484018d868560051b8701011115610979578687fd5b8694505b838510156109a457803561099081610c96565b83526001949094019391850191850161097d565b5080955050505050509295509295509295565b600080600080608085870312156109cc578384fd5b843567ffffffffffffffff8111156109e2578485fd5b6109ee87828801610850565b97602087013597506040870135966060013595509350505050565b60006020808385031215610a1b578182fd5b825167ffffffffffffffff811115610a31578283fd5b8301601f81018513610a41578283fd5b8051610a4f61087082610c09565b80828252848201915084840188868560051b8701011115610a6e578687fd5b8694505b83851015610a90578051835260019490940193918501918501610a72565b50979650505050505050565b600060208284031215610aad578081fd5b5051919050565b600060208284031215610ac5578081fd5b8151610ad081610c96565b9392505050565b6000815180845260208085019450808401835b83811015610b0f5781516001600160a01b031687529582019590820190600101610aea565b509495945050505050565b60008251610b2c818460208701610c50565b9190910192915050565b60a08152600086518060a0840152610b558160c0850160208b01610c50565b60208301879052601f01601f1916820182810360c09081016040850152610b7e90820187610ad7565b6001600160a01b039590951660608401525050608001529392505050565b85815284602082015260a060408201526000610bbb60a0830186610ad7565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c0157610c01610c80565b604052919050565b600067ffffffffffffffff821115610c2357610c23610c80565b5060051b60200190565b600082821015610c4b57634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015610c6b578181015183820152602001610c53565b83811115610c7a576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b60ff81168114610ca557600080fd5b5056fea26469706673582212203b2ad4432e31c849afc9dcdc1750885f0e512d752cc2228c89251fcd988f97f664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}