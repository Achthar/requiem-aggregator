{
  "address": "0x1cd3976123e7c2D052eB42DE5F52895b0418F626",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x63609a0937b3a9b3c5d05f26b2fe76d9ab40a81539581ecc1aec02672d992341",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0x1cd3976123e7c2D052eB42DE5F52895b0418F626",
    "transactionIndex": 0,
    "gasUsed": "3390725",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7bab4156ffe882b208a3d582104b1ddc4a73aaae8757419e7151ad055408e626",
    "transactionHash": "0x63609a0937b3a9b3c5d05f26b2fe76d9ab40a81539581ecc1aec02672d992341",
    "logs": [],
    "blockNumber": 1988070,
    "cumulativeGasUsed": "3390725",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d3cd0b2d51786d70fd8bcac41d47fee6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 sold_id,\\n        uint256 tokens_sold,\\n        uint256 bought_id,\\n        uint256 tokens_bought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"initialDepositRequireAllTokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(msg.sender, dy);\\n        emit TokenExchange(msg.sender, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> slippage\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> slippage\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance - 1) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return\\n                self.initialA +\\n                ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) /\\n                (self.futureATime - self.initialATime);\\n        }\\n\\n        return\\n            self.initialA -\\n            ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) /\\n            (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D =\\n                (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) /\\n                (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap success\\n     * @return NORMALIZED balance of output token if the swap success\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp);\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) /\\n            FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] =\\n                    (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) /\\n                    ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return\\n                (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) /\\n                (4 weeks) /\\n                FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n}\\n\",\"keccak256\":\"0x5eeaac19a3300c035b7bb5c61f97c22d0e471267ab7aa6a973d137642b9bf885\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb55c91551ef864f86edd296378fc3430f19798c0d1de468ff772a83a842df24c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x4065401847859fdea8270079da0d5d94d4d6bcb16b83753f25d77c03bc9fa66d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 soldId,\\n        uint256 tokensSold,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 tokenSupply\\n    );\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0x121eb6c1c2b8664595b880ebaa7096caf3a4883d65ef8a06a1eee63f83e7a032\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xc1202fa69783cb3ea0d87f178cab5e1f3a77de7fc0dff3c47f668f3cd65d9273\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x45cb9d70dc84e6f4ec8202a58599a881421174348e0fd4400a99a22678aa7913\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\",\"keccak256\":\"0xce7fe9653f501bb602a1dc5af2f882952472d43e6e41ce2391d6466d9d830d5b\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x38590e23866a35612fb37c8682272b21fded3c9c286ab5ed3f2cb78329c025ed\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xebc779eef137e493b8c2a11fa304d5ed6b62726ae1b6c3c71d5ce2fbb9da42d8\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x3ed129ce99188978b1768041fbbaa51cb5c850113c7f33ccc43d19ce524c9dbe\",\"license\":\"MIT\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1eca33dbd98dab6ec7336d1f3a723a59a1fb337954a57c881639898a67a74fbe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x613c6761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c8063c188e4be116100ac578063d011f9181161007b578063d011f91814610263578063d36604ac1461026b578063d73792a91461027e578063e2eba89b1461028a578063fa5635971461029d57600080fd5b8063c188e4be146101ec578063c20aace81461020e578063c685696c14610216578063c8344c061461024357600080fd5b80637a6cba3c116100e85780637a6cba3c14610193578063a3035585146101b3578063b52e146f146101c6578063ba2998d9146101d957600080fd5b8063159763bb1461011a5780631e7e95d3146101405780632bfe30d0146101535780636e9b505d14610173575b600080fd5b61012d6101283660046136ca565b6102b0565b6040519081526020015b60405180910390f35b61012d61014e366004613704565b6102c8565b81801561015f57600080fd5b5061012d61016e36600461381a565b610630565b81801561017f57600080fd5b5061012d61018e36600461384b565b6109cf565b81801561019f57600080fd5b5061012d6101ae36600461375d565b610ce0565b61012d6101c136600461367e565b61143d565b61012d6101d436600461367e565b61144e565b61012d6101e736600461381a565b611465565b8180156101f857600080fd5b5061020c610207366004613696565b6115aa565b005b61012d601281565b81801561022257600080fd5b506102366102313660046137cc565b6115ba565b60405161013791906138f3565b81801561024f57600080fd5b5061012d61025e36600461375d565b6118de565b61012d606481565b61012d61027936600461367e565b611f9c565b61012d6402540be40081565b61012d6102983660046137ab565b612070565b6102366102ab366004613696565b612172565b60006102be8585858561217f565b5095945050505050565b825482516000919081146102f75760405162461bcd60e51b81526004016102ee90613a02565b60405180910390fd5b600061030286612519565b90506000610318610312886125f2565b836126a0565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561036a57602002820191906000526020600020905b815481526020019060010190808311610356575b5050505050905060005b848110156104585786156103e6578781815181106103a257634e487b7160e01b600052603260045260246000fd5b60200260200101518282815181106103ca57634e487b7160e01b600052603260045260246000fd5b602002602001018181516103de9190613a54565b905250610446565b87818151811061040657634e487b7160e01b600052603260045260246000fd5b602002602001015182828151811061042e57634e487b7160e01b600052603260045260246000fd5b602002602001018181516104429190613b96565b9052505b8061045081613bd9565b915050610374565b5060006104c06104ba838b6002018054806020026020016040519081016040528092919081815260200182805480156104b057602002820191906000526020600020905b81548152602001906001019080831161049c575b505050505061284a565b856126a0565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561051457600080fd5b505afa158015610528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054c9190613885565b905080610560575094506106299350505050565b600088610576576105718386613b96565b610580565b6105808584613b96565b9050848b60010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d357600080fd5b505afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190613885565b6106159083613b77565b61061f9190613a6c565b9750505050505050505b9392505050565b6000808560010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561068357600080fd5b505afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190613885565b9050600081116106ff5760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b60448201526064016102ee565b855460018701546040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561074657600080fd5b505afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190613885565b8611156107b95760405162461bcd60e51b81526020600482015260096024820152683e2062616c616e636560b81b60448201526064016102ee565b818611156107f95760405162461bcd60e51b815260206004820152600d60248201526c3e20746f74616c537570706c7960981b60448201526064016102ee565b8085106108385760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b60448201526064016102ee565b60008061084789338a8a61217f565b925090508581101561086b5760405162461bcd60e51b81526004016102ee90613a30565b6402540be4008960050154836108819190613b77565b61088b9190613a6c565b6108959082613a54565b8960030188815481106108b857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160008282546108d19190613b96565b9091555050600189015460405163079cc67960e41b8152336004820152602481018a90526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b5050505061098033828b6000018a8154811061096457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691906128f7565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b6000808660000186815481106109f557634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b03169150610a14886125f2565b9050610a20828661295a565b94506000886002018881548110610a4757634e487b7160e01b600052603260045260246000fd5b906000526020600020015486610a5d9190613b77565b828981518110610a7d57634e487b7160e01b600052603260045260246000fd5b6020026020010151610a8f9190613a54565b90506000610aa08a8a8a8587612a70565b90506000600182858b81518110610ac757634e487b7160e01b600052603260045260246000fd5b6020026020010151610ad99190613b96565b610ae39190613b96565b905060006402540be4008c6004015483610afd9190613b77565b610b079190613a6c565b90508b6002018a81548110610b2c57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548183610b439190613b96565b610b4d9190613a6c565b915087821015610b6f5760405162461bcd60e51b81526004016102ee90613a30565b60008c6002018b81548110610b9457634e487b7160e01b600052603260045260246000fd5b90600052602060002001546402540be4008e6005015484610bb59190613b77565b610bbf9190613a6c565b610bc99190613a6c565b9050898d6003018d81548110610bef57634e487b7160e01b600052603260045260246000fd5b906000526020600020016000828254610c089190613a54565b90915550610c1890508184613a54565b8d6003018c81548110610c3b57634e487b7160e01b600052603260045260246000fd5b906000526020600020016000828254610c549190613b96565b92505081905550610c8333848f6000018e8154811061096457634e487b7160e01b600052603260045260246000fd5b604080518d8152602081018c90529081018c90526060810184905233907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a25090955050505050505b95945050505050565b82548251600091908114610d065760405162461bcd60e51b81526004016102ee90613a02565b60008167ffffffffffffffff811115610d2f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d58578160200160208202803683370190505b5090506000610d6687612cb0565b905060008760010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df29190613885565b90506000610dff89612519565b905060008215610ebb57610eb86103128b600301805480602002602001604051908101604052809291908181526020018280548015610e5d57602002820191906000526020600020905b815481526020019060010190808311610e49575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015610f0b57602002820191906000526020600020905b815481526020019060010190808311610ef7575b5050505050905060005b878110156110535784610f995760008b8281518110610f4457634e487b7160e01b600052603260045260246000fd5b602002602001015111610f995760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016102ee565b61100a8c6000018281548110610fbf57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168c8381518110610ffd57634e487b7160e01b600052603260045260246000fd5b602002602001015161295a565b82828151811061102a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815161103e9190613a54565b9052508061104b81613bd9565b915050610f15565b5060006110b36104ba838e6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b90508281116110d257634e487b7160e01b600052600160045260246000fd5b846110f55781516110ec9060038e01906020850190613548565b50809850611361565b6000805b898110156112d857611175858f600301838154811061112857634e487b7160e01b600052603260045260246000fd5b90600052602060002001548561113e9190613b77565b6111489190613a6c565b85838151811061116857634e487b7160e01b600052603260045260246000fd5b6020026020010151612ce5565b91506402540be400611187838a613b77565b6111919190613a6c565b8982815181106111b157634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506402540be4008e600501548a83815181106111e857634e487b7160e01b600052603260045260246000fd5b60200260200101516111fa9190613b77565b6112049190613a6c565b84828151811061122457634e487b7160e01b600052603260045260246000fd5b60200260200101516112369190613b96565b8e600301828154811061125957634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555088818151811061128757634e487b7160e01b600052603260045260246000fd5b60200260200101518482815181106112af57634e487b7160e01b600052603260045260246000fd5b602002602001018181516112c39190613b96565b905250806112d081613bd9565b9150506110f9565b5061133c611336848f6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b866126a0565b9150836113498184613b96565b6113539088613b77565b61135d9190613a6c565b9950505b898910156113815760405162461bcd60e51b81526004016102ee90613a30565b60018c01546040516340c10f1960e01b8152336004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156113cf57600080fd5b505af11580156113e3573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d604051611426949392919061396d565b60405180910390a250505050505050509392505050565b600061144882612519565b92915050565b6000606461145b83612519565b6114489190613a6c565b600080611471866125f2565b9050600086600201868154811061149857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154846114ae9190613b77565b8287815181106114ce57634e487b7160e01b600052603260045260246000fd5b60200260200101516114e09190613a54565b905060006114f18888888587612a70565b9050600088600201878154811061151857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600183868a8151811061154657634e487b7160e01b600052603260045260246000fd5b60200260200101516115589190613b96565b6115629190613b96565b61156c9190613a6c565b905060006402540be400828b600401546115869190613b77565b6115909190613a6c565b905061159c8183613b96565b9a9950505050505050505050565b6115b5838383612d07565b505050565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561160e57600080fd5b505afa158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116469190613885565b90508084111561165557600080fd5b845460008167ffffffffffffffff81111561168057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156116a9578160200160208202803683370190505b5090506116b7873388612e92565b935060005b8451811015611825578581815181106116e557634e487b7160e01b600052603260045260246000fd5b602002602001015185828151811061170d57634e487b7160e01b600052603260045260246000fd5b602002602001015110156117335760405162461bcd60e51b81526004016102ee90613a30565b84818151811061175357634e487b7160e01b600052603260045260246000fd5b602002602001015188600301828154811061177e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546117939190613b96565b8860030182815481106117b657634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550611813338683815181106117e857634e487b7160e01b600052603260045260246000fd5b60200260200101518a600001848154811061096457634e487b7160e01b600052603260045260246000fd5b8061181d81613bd9565b9150506116bc565b50600187015460405163079cc67960e41b8152336004820152602481018890526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561187457600080fd5b505af1158015611888573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836118bd8a88613b96565b6040516118cc93929190613937565b60405180910390a25050509392505050565b825482516000919081146119045760405162461bcd60e51b81526004016102ee90613a02565b6001850154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561194b57600080fd5b505afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119839190613885565b9050806119c45760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b60448201526064016102ee565b60006119cf87612cb0565b905060006119dc88612519565b9050600088600301805480602002602001604051908101604052809291908181526020018280548015611a2e57602002820191906000526020600020905b815481526020019060010190808311611a1a575b505050505090506000611a49611a438b6125f2565b846126a0565b905060005b86811015611ac757898181518110611a7657634e487b7160e01b600052603260045260246000fd5b6020026020010151838281518110611a9e57634e487b7160e01b600052603260045260246000fd5b60200260200101818151611ab29190613b96565b90525080611abf81613bd9565b915050611a4e565b506000611b276104ba848d6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b905060008767ffffffffffffffff811115611b5257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b7b578160200160208202803683370190505b50905060005b88811015611d6b576000848e6003018381548110611baf57634e487b7160e01b600052603260045260246000fd5b906000526020600020015485611bc59190613b77565b611bcf9190613a6c565b90506000611c04878481518110611bf657634e487b7160e01b600052603260045260246000fd5b602002602001015183612ce5565b90506402540be400611c16828b613b77565b611c209190613a6c565b848481518110611c4057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506402540be4008f60050154858581518110611c7757634e487b7160e01b600052603260045260246000fd5b6020026020010151611c899190613b77565b611c939190613a6c565b878481518110611cb357634e487b7160e01b600052603260045260246000fd5b6020026020010151611cc59190613b96565b8f6003018481548110611ce857634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550838381518110611d1657634e487b7160e01b600052603260045260246000fd5b6020026020010151878481518110611d3e57634e487b7160e01b600052603260045260246000fd5b60200260200101818151611d529190613b96565b905250829150611d63905081613bd9565b915050611b81565b50611dc9611336858e6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b91508287611dd78483613b96565b611de19190613b77565b611deb9190613a6c565b985060008911611e0b57634e487b7160e01b600052600160045260246000fd5b611e158c33613097565b611e24906402540be400613b96565b611e2f8a6001613a54565b611e399190613b77565b985089891115611e5b5760405162461bcd60e51b81526004016102ee90613a30565b60018c015460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b5050505060005b88811015611f5c578b8181518110611eec57634e487b7160e01b600052603260045260246000fd5b6020026020010151600014611f4a57611f4a338d8381518110611f1f57634e487b7160e01b600052603260045260246000fd5b60200260200101518f600001848154811061096457634e487b7160e01b600052603260045260246000fd5b80611f5481613bd9565b915050611ec4565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385611f8c8e8d613b96565b604051611426949392919061396d565b600080611fb9611fab846125f2565b611fb485612519565b6126a0565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561200d57600080fd5b505afa158015612021573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120459190613885565b9050806120546012600a613acf565b61205e9084613b77565b6120689190613a6c565b949350505050565b815460009082106120935760405162461bcd60e51b81526004016102ee906139d9565b8260030182815481106120b657634e487b7160e01b600052603260045260246000fd5b90600052602060002001548360000183815481106120e457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561213057600080fd5b505afa158015612144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121689190613885565b6106299190613b96565b6060612068848484612e92565b8354600090819083106121a45760405162461bcd60e51b81526004016102ee906139d9565b60006121af87612519565b905060006121bc886125f2565b905060006121ca82846126a0565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561221e57600080fd5b505afa158015612232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122569190613885565b612260838a613b77565b61226a9190613a6c565b6122749083613b96565b905060006122858b868a8786613143565b90508360006122938d612cb0565b905060005b8d548110156123d35760008b8214156122fb578487878a85815181106122ce57634e487b7160e01b600052603260045260246000fd5b60200260200101516122e09190613b77565b6122ea9190613a6c565b6122f49190613b96565b905061236e565b868689848151811061231d57634e487b7160e01b600052603260045260246000fd5b602002602001015161232f9190613b77565b6123399190613a6c565b88838151811061235957634e487b7160e01b600052603260045260246000fd5b602002602001015161236b9190613b96565b90505b6402540be40061237e8285613b77565b6123889190613a6c565b8483815181106123a857634e487b7160e01b600052603260045260246000fd5b602002602001018181516123bc9190613b96565b9052508190506123cb81613bd9565b915050612298565b506123e18d888c8588613143565b828b8151811061240157634e487b7160e01b600052603260045260246000fd5b60200260200101516124139190613b96565b98508c6002018a8154811061243857634e487b7160e01b600052603260045260246000fd5b906000526020600020015460018a6124509190613b96565b61245a9190613a6c565b9850888d6002018b8154811061248057634e487b7160e01b600052603260045260246000fd5b906000526020600020015484888d815181106124ac57634e487b7160e01b600052603260045260246000fd5b60200260200101516124be9190613b96565b6124c89190613a6c565b6124d29190613b96565b97506402540be4006124e48e8e613097565b6124f3906402540be400613b96565b6124fd908b613b77565b6125079190613a6c565b98505050505050505094509492505050565b60008160090154421061252e57506007015490565b81600601548260070154111561259857816008015482600901546125529190613b96565b60088301546125619042613b96565b836006015484600701546125759190613b96565b61257f9190613b77565b6125899190613a6c565b82600601546114489190613a54565b816008015482600901546125ac9190613b96565b60088301546125bb9042613b96565b836007015484600601546125cf9190613b96565b6125d99190613b77565b6125e39190613a6c565b82600601546114489190613b96565b60606114488260030180548060200260200160405190810160405280929190818152602001828054801561264557602002820191906000526020600020905b815481526020019060010190808311612631575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b8151600090816126af856132d3565b9050806126c157600092505050611448565b600081816126cf8588613b77565b905060005b610100811015612801578260005b8a5181101561274657878b828151811061270c57634e487b7160e01b600052603260045260246000fd5b602002602001015161271e9190613b77565b6127288684613b77565b6127329190613a6c565b91508061273e81613bd9565b9150506126e2565b50839450808760016127589190613a54565b6127629190613b77565b60648561276f8287613b96565b6127799190613b77565b6127839190613a6c565b61278d9190613a54565b846127988984613b77565b60646127a48a88613b77565b6127ae9190613a6c565b6127b89190613a54565b6127c29190613b77565b6127cc9190613a6c565b935060016127da8587612ce5565b116127ee5783975050505050505050611448565b50806127f981613bd9565b9150506126d4565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c656400000000000060448201526064016102ee565b606060005b83518110156128ef5783818151811061287857634e487b7160e01b600052603260045260246000fd5b60200260200101518382815181106128a057634e487b7160e01b600052603260045260246000fd5b60200260200101516128b29190613b77565b8382815181106128d257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806128e781613bd9565b91505061284f565b509092915050565b6040516001600160a01b0383166024820152604481018290526115b590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261332d565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561299e57600080fd5b505afa1580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d69190613885565b90506129ed6001600160a01b0385163330866133ff565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a082319060240160206040518083038186803b158015612a2e57600080fd5b505afa158015612a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a669190613885565b6120689190613b96565b600083851415612aae5760405162461bcd60e51b815260206004820152600960248201526839b0b6b2aa37b5b2b760b91b60448201526064016102ee565b85548086108015612abe57508085105b612ada5760405162461bcd60e51b81526004016102ee906139d9565b6000612ae588612519565b90506000612af38383613b77565b90506000612b0186846126a0565b9050600081815b86811015612b97578a811415612b1d57612b85565b60008c8214612b5357898281518110612b4657634e487b7160e01b600052603260045260246000fd5b6020026020010151612b55565b8a5b9050612b618185613a54565b9350612b6d8882613b77565b612b778685613b77565b612b819190613a6c565b9250505b80612b8f81613bd9565b915050612b08565b50612ba28685613b77565b6064612bae8584613b77565b612bb89190613b77565b612bc29190613a6c565b9050600084612bd2606486613b77565b612bdc9190613a6c565b612be69084613a54565b9050600084815b610100811015612c72578192508684836002612c099190613b77565b612c139190613a54565b612c1d9190613b96565b85612c288480613b77565b612c329190613a54565b612c3c9190613a6c565b91506001612c4a8484612ce5565b11612c6057509850610cd7975050505050505050565b80612c6a81613bd9565b915050612bed565b5060405162461bcd60e51b81526020600482015260126024820152711e50d85b18dd5b185d1a5bdb91985a5b195960721b60448201526064016102ee565b8054600090612cc0600182613b96565b612ccb906004613b77565b818460040154612cdb9190613b77565b6106299190613a6c565b6000818311612cfd57612cf88383613b96565b610629565b6106298284613b96565b6001600160a01b038216612d1a57505050565b600a830154612d4a576001600160a01b0382166000908152600c8401602052604090206402540be4009055612e72565b6000612d568484613097565b60018501546040516370a0823160e01b81526001600160a01b038681166004830152929350600092909116906370a082319060240160206040518083038186803b158015612da357600080fd5b505afa158015612db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddb9190613885565b600a860154909150612ded8285613a54565b612df79190613b77565b15612e6f57600a850154612e0b8285613a54565b612e159190613b77565b6402540be40086600a015485612e2b9190613b77565b612e358585613b77565b612e3f9190613a54565b612e499190613b77565b612e539190613a6c565b6001600160a01b0385166000908152600c870160205260409020555b50505b506001600160a01b03166000908152600b90910160205260409020429055565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ee657600080fd5b505afa158015612efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1e9190613885565b905080831115612f705760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c7900000000000060448201526064016102ee565b60006402540be400612f828787613097565b612f91906402540be400613b96565b612f9b9086613b77565b612fa59190613a6c565b865490915060009067ffffffffffffffff811115612fd357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ffc578160200160208202803683370190505b50905060005b875481101561308c57838389600301838154811061303057634e487b7160e01b600052603260045260246000fd5b90600052602060002001546130459190613b77565b61304f9190613a6c565b82828151811061306f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061308481613bd9565b915050613002565b509695505050505050565b6001600160a01b0381166000908152600b8301602052604081205481906130c1906224ea00613a54565b9050428111156131395760006130d74283613b96565b6001600160a01b0385166000908152600c87016020526040902054600a8701549192506402540be400916224ea009184916131129190613b77565b61311c9190613b77565b6131269190613a6c565b6131309190613a6c565b92505050611448565b5060009392505050565b845460009080851061316557634e487b7160e01b600052600160045260246000fd5b60006131718288613b77565b90508360008080805b868110156131fa578a81141561318f576131e8565b8981815181106131af57634e487b7160e01b600052603260045260246000fd5b6020026020010151925082846131c59190613a54565b93506131d18784613b77565b6131db8a87613b77565b6131e59190613a6c565b94505b806131f281613bd9565b91505061317a565b506132058686613b77565b60646132118a87613b77565b61321b9190613b77565b6132259190613a6c565b935060008561323560648b613b77565b61323f9190613a6c565b6132499085613a54565b90508860005b610100811015612801578193508a8383600261326b9190613b77565b6132759190613a54565b61327f9190613b96565b8761328a8480613b77565b6132949190613a54565b61329e9190613a6c565b915060016132ac8584612ce5565b116132c157509750610cd79650505050505050565b806132cb81613bd9565b91505061324f565b6000805b82518110156133275782818151811061330057634e487b7160e01b600052603260045260246000fd5b6020026020010151826133139190613a54565b91508061331f81613bd9565b9150506132d7565b50919050565b6000613382826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661343d9092919063ffffffff16565b8051909150156115b557808060200190518101906133a09190613662565b6115b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102ee565b6040516001600160a01b03808516602483015283166044820152606481018290526134379085906323b872dd60e01b90608401612923565b50505050565b6060612068848460008585843b6134965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ee565b600080866001600160a01b031685876040516134b291906138d7565b60006040518083038185875af1925050503d80600081146134ef576040519150601f19603f3d011682016040523d82523d6000602084013e6134f4565b606091505b509150915061350482828661350f565b979650505050505050565b6060831561351e575081610629565b82511561352e5782518084602001fd5b8160405162461bcd60e51b81526004016102ee91906139a6565b828054828255906000526020600020908101928215613583579160200282015b82811115613583578251825591602001919060010190613568565b5061358f929150613593565b5090565b5b8082111561358f5760008155600101613594565b80356001600160a01b03811681146135bf57600080fd5b919050565b600082601f8301126135d4578081fd5b8135602067ffffffffffffffff808311156135f1576135f1613c0a565b8260051b604051601f19603f8301168101818110848211171561361657613616613c0a565b60405284815283810192508684018288018501891015613634578687fd5b8692505b85831015613656578035845292840192600192909201918401613638565b50979650505050505050565b600060208284031215613673578081fd5b815161062981613c20565b60006020828403121561368f578081fd5b5035919050565b6000806000606084860312156136aa578182fd5b833592506136ba602085016135a8565b9150604084013590509250925092565b600080600080608085870312156136df578081fd5b843593506136ef602086016135a8565b93969395505050506040820135916060013590565b600080600060608486031215613718578283fd5b83359250602084013567ffffffffffffffff811115613735578283fd5b613741868287016135c4565b925050604084013561375281613c20565b809150509250925092565b600080600060608486031215613771578283fd5b83359250602084013567ffffffffffffffff81111561378e578283fd5b61379a868287016135c4565b925050604084013590509250925092565b600080604083850312156137bd578182fd5b50508035926020909101359150565b6000806000606084860312156137e0578283fd5b8335925060208401359150604084013567ffffffffffffffff811115613804578182fd5b613810868287016135c4565b9150509250925092565b6000806000806080858703121561382f578384fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a08688031215613862578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600060208284031215613896578081fd5b5051919050565b6000815180845260208085019450808401835b838110156138cc578151875295820195908201906001016138b0565b509495945050505050565b600082516138e9818460208701613bad565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561392b5783518352928401929184019160010161390f565b50909695505050505050565b60608152600061394a606083018661389d565b828103602084015261395c818661389d565b915050826040830152949350505050565b608081526000613980608083018761389d565b8281036020840152613992818761389d565b604084019590955250506060015292915050565b60208152600082518060208401526139c5816040850160208701613bad565b601f01601f19169190910160400192915050565b6020808252600f908201526e696e6465784f75744f6652616e676560881b604082015260600190565b6020808252601490820152730d2dcecc2d8d2c882dadeeadce8e698cadccee8d60631b604082015260600190565b6020808252600a90820152693e20736c69707061676560b01b604082015260600190565b60008219821115613a6757613a67613bf4565b500190565b600082613a8757634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115613ac7578160001904821115613aad57613aad613bf4565b80851615613aba57918102915b93841c9390800290613a91565b509250929050565b60006106298383600082613ae557506001611448565b81613af257506000611448565b8160018114613b085760028114613b1257613b2e565b6001915050611448565b60ff841115613b2357613b23613bf4565b50506001821b611448565b5060208310610133831016604e8410600b8410161715613b51575081810a611448565b613b5b8383613a8c565b8060001904821115613b6f57613b6f613bf4565b029392505050565b6000816000190483118215151615613b9157613b91613bf4565b500290565b600082821015613ba857613ba8613bf4565b500390565b60005b83811015613bc8578181015183820152602001613bb0565b838111156134375750506000910152565b6000600019821415613bed57613bed613bf4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114613c2e57600080fd5b5056fea264697066735822122076ab2ef9a2832912953b1286c23d999eac79d6e95460da8fad2fe346eaa5753664736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c8063c188e4be116100ac578063d011f9181161007b578063d011f91814610263578063d36604ac1461026b578063d73792a91461027e578063e2eba89b1461028a578063fa5635971461029d57600080fd5b8063c188e4be146101ec578063c20aace81461020e578063c685696c14610216578063c8344c061461024357600080fd5b80637a6cba3c116100e85780637a6cba3c14610193578063a3035585146101b3578063b52e146f146101c6578063ba2998d9146101d957600080fd5b8063159763bb1461011a5780631e7e95d3146101405780632bfe30d0146101535780636e9b505d14610173575b600080fd5b61012d6101283660046136ca565b6102b0565b6040519081526020015b60405180910390f35b61012d61014e366004613704565b6102c8565b81801561015f57600080fd5b5061012d61016e36600461381a565b610630565b81801561017f57600080fd5b5061012d61018e36600461384b565b6109cf565b81801561019f57600080fd5b5061012d6101ae36600461375d565b610ce0565b61012d6101c136600461367e565b61143d565b61012d6101d436600461367e565b61144e565b61012d6101e736600461381a565b611465565b8180156101f857600080fd5b5061020c610207366004613696565b6115aa565b005b61012d601281565b81801561022257600080fd5b506102366102313660046137cc565b6115ba565b60405161013791906138f3565b81801561024f57600080fd5b5061012d61025e36600461375d565b6118de565b61012d606481565b61012d61027936600461367e565b611f9c565b61012d6402540be40081565b61012d6102983660046137ab565b612070565b6102366102ab366004613696565b612172565b60006102be8585858561217f565b5095945050505050565b825482516000919081146102f75760405162461bcd60e51b81526004016102ee90613a02565b60405180910390fd5b600061030286612519565b90506000610318610312886125f2565b836126a0565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561036a57602002820191906000526020600020905b815481526020019060010190808311610356575b5050505050905060005b848110156104585786156103e6578781815181106103a257634e487b7160e01b600052603260045260246000fd5b60200260200101518282815181106103ca57634e487b7160e01b600052603260045260246000fd5b602002602001018181516103de9190613a54565b905250610446565b87818151811061040657634e487b7160e01b600052603260045260246000fd5b602002602001015182828151811061042e57634e487b7160e01b600052603260045260246000fd5b602002602001018181516104429190613b96565b9052505b8061045081613bd9565b915050610374565b5060006104c06104ba838b6002018054806020026020016040519081016040528092919081815260200182805480156104b057602002820191906000526020600020905b81548152602001906001019080831161049c575b505050505061284a565b856126a0565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561051457600080fd5b505afa158015610528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054c9190613885565b905080610560575094506106299350505050565b600088610576576105718386613b96565b610580565b6105808584613b96565b9050848b60010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d357600080fd5b505afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190613885565b6106159083613b77565b61061f9190613a6c565b9750505050505050505b9392505050565b6000808560010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561068357600080fd5b505afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190613885565b9050600081116106ff5760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b60448201526064016102ee565b855460018701546040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561074657600080fd5b505afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190613885565b8611156107b95760405162461bcd60e51b81526020600482015260096024820152683e2062616c616e636560b81b60448201526064016102ee565b818611156107f95760405162461bcd60e51b815260206004820152600d60248201526c3e20746f74616c537570706c7960981b60448201526064016102ee565b8085106108385760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b60448201526064016102ee565b60008061084789338a8a61217f565b925090508581101561086b5760405162461bcd60e51b81526004016102ee90613a30565b6402540be4008960050154836108819190613b77565b61088b9190613a6c565b6108959082613a54565b8960030188815481106108b857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160008282546108d19190613b96565b9091555050600189015460405163079cc67960e41b8152336004820152602481018a90526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b5050505061098033828b6000018a8154811061096457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691906128f7565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b6000808660000186815481106109f557634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b03169150610a14886125f2565b9050610a20828661295a565b94506000886002018881548110610a4757634e487b7160e01b600052603260045260246000fd5b906000526020600020015486610a5d9190613b77565b828981518110610a7d57634e487b7160e01b600052603260045260246000fd5b6020026020010151610a8f9190613a54565b90506000610aa08a8a8a8587612a70565b90506000600182858b81518110610ac757634e487b7160e01b600052603260045260246000fd5b6020026020010151610ad99190613b96565b610ae39190613b96565b905060006402540be4008c6004015483610afd9190613b77565b610b079190613a6c565b90508b6002018a81548110610b2c57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548183610b439190613b96565b610b4d9190613a6c565b915087821015610b6f5760405162461bcd60e51b81526004016102ee90613a30565b60008c6002018b81548110610b9457634e487b7160e01b600052603260045260246000fd5b90600052602060002001546402540be4008e6005015484610bb59190613b77565b610bbf9190613a6c565b610bc99190613a6c565b9050898d6003018d81548110610bef57634e487b7160e01b600052603260045260246000fd5b906000526020600020016000828254610c089190613a54565b90915550610c1890508184613a54565b8d6003018c81548110610c3b57634e487b7160e01b600052603260045260246000fd5b906000526020600020016000828254610c549190613b96565b92505081905550610c8333848f6000018e8154811061096457634e487b7160e01b600052603260045260246000fd5b604080518d8152602081018c90529081018c90526060810184905233907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a25090955050505050505b95945050505050565b82548251600091908114610d065760405162461bcd60e51b81526004016102ee90613a02565b60008167ffffffffffffffff811115610d2f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d58578160200160208202803683370190505b5090506000610d6687612cb0565b905060008760010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df29190613885565b90506000610dff89612519565b905060008215610ebb57610eb86103128b600301805480602002602001604051908101604052809291908181526020018280548015610e5d57602002820191906000526020600020905b815481526020019060010190808311610e49575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015610f0b57602002820191906000526020600020905b815481526020019060010190808311610ef7575b5050505050905060005b878110156110535784610f995760008b8281518110610f4457634e487b7160e01b600052603260045260246000fd5b602002602001015111610f995760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016102ee565b61100a8c6000018281548110610fbf57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168c8381518110610ffd57634e487b7160e01b600052603260045260246000fd5b602002602001015161295a565b82828151811061102a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815161103e9190613a54565b9052508061104b81613bd9565b915050610f15565b5060006110b36104ba838e6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b90508281116110d257634e487b7160e01b600052600160045260246000fd5b846110f55781516110ec9060038e01906020850190613548565b50809850611361565b6000805b898110156112d857611175858f600301838154811061112857634e487b7160e01b600052603260045260246000fd5b90600052602060002001548561113e9190613b77565b6111489190613a6c565b85838151811061116857634e487b7160e01b600052603260045260246000fd5b6020026020010151612ce5565b91506402540be400611187838a613b77565b6111919190613a6c565b8982815181106111b157634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506402540be4008e600501548a83815181106111e857634e487b7160e01b600052603260045260246000fd5b60200260200101516111fa9190613b77565b6112049190613a6c565b84828151811061122457634e487b7160e01b600052603260045260246000fd5b60200260200101516112369190613b96565b8e600301828154811061125957634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555088818151811061128757634e487b7160e01b600052603260045260246000fd5b60200260200101518482815181106112af57634e487b7160e01b600052603260045260246000fd5b602002602001018181516112c39190613b96565b905250806112d081613bd9565b9150506110f9565b5061133c611336848f6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b866126a0565b9150836113498184613b96565b6113539088613b77565b61135d9190613a6c565b9950505b898910156113815760405162461bcd60e51b81526004016102ee90613a30565b60018c01546040516340c10f1960e01b8152336004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156113cf57600080fd5b505af11580156113e3573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d604051611426949392919061396d565b60405180910390a250505050505050509392505050565b600061144882612519565b92915050565b6000606461145b83612519565b6114489190613a6c565b600080611471866125f2565b9050600086600201868154811061149857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154846114ae9190613b77565b8287815181106114ce57634e487b7160e01b600052603260045260246000fd5b60200260200101516114e09190613a54565b905060006114f18888888587612a70565b9050600088600201878154811061151857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600183868a8151811061154657634e487b7160e01b600052603260045260246000fd5b60200260200101516115589190613b96565b6115629190613b96565b61156c9190613a6c565b905060006402540be400828b600401546115869190613b77565b6115909190613a6c565b905061159c8183613b96565b9a9950505050505050505050565b6115b5838383612d07565b505050565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561160e57600080fd5b505afa158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116469190613885565b90508084111561165557600080fd5b845460008167ffffffffffffffff81111561168057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156116a9578160200160208202803683370190505b5090506116b7873388612e92565b935060005b8451811015611825578581815181106116e557634e487b7160e01b600052603260045260246000fd5b602002602001015185828151811061170d57634e487b7160e01b600052603260045260246000fd5b602002602001015110156117335760405162461bcd60e51b81526004016102ee90613a30565b84818151811061175357634e487b7160e01b600052603260045260246000fd5b602002602001015188600301828154811061177e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546117939190613b96565b8860030182815481106117b657634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550611813338683815181106117e857634e487b7160e01b600052603260045260246000fd5b60200260200101518a600001848154811061096457634e487b7160e01b600052603260045260246000fd5b8061181d81613bd9565b9150506116bc565b50600187015460405163079cc67960e41b8152336004820152602481018890526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561187457600080fd5b505af1158015611888573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836118bd8a88613b96565b6040516118cc93929190613937565b60405180910390a25050509392505050565b825482516000919081146119045760405162461bcd60e51b81526004016102ee90613a02565b6001850154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561194b57600080fd5b505afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119839190613885565b9050806119c45760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b60448201526064016102ee565b60006119cf87612cb0565b905060006119dc88612519565b9050600088600301805480602002602001604051908101604052809291908181526020018280548015611a2e57602002820191906000526020600020905b815481526020019060010190808311611a1a575b505050505090506000611a49611a438b6125f2565b846126a0565b905060005b86811015611ac757898181518110611a7657634e487b7160e01b600052603260045260246000fd5b6020026020010151838281518110611a9e57634e487b7160e01b600052603260045260246000fd5b60200260200101818151611ab29190613b96565b90525080611abf81613bd9565b915050611a4e565b506000611b276104ba848d6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b905060008767ffffffffffffffff811115611b5257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b7b578160200160208202803683370190505b50905060005b88811015611d6b576000848e6003018381548110611baf57634e487b7160e01b600052603260045260246000fd5b906000526020600020015485611bc59190613b77565b611bcf9190613a6c565b90506000611c04878481518110611bf657634e487b7160e01b600052603260045260246000fd5b602002602001015183612ce5565b90506402540be400611c16828b613b77565b611c209190613a6c565b848481518110611c4057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506402540be4008f60050154858581518110611c7757634e487b7160e01b600052603260045260246000fd5b6020026020010151611c899190613b77565b611c939190613a6c565b878481518110611cb357634e487b7160e01b600052603260045260246000fd5b6020026020010151611cc59190613b96565b8f6003018481548110611ce857634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550838381518110611d1657634e487b7160e01b600052603260045260246000fd5b6020026020010151878481518110611d3e57634e487b7160e01b600052603260045260246000fd5b60200260200101818151611d529190613b96565b905250829150611d63905081613bd9565b915050611b81565b50611dc9611336858e6002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b91508287611dd78483613b96565b611de19190613b77565b611deb9190613a6c565b985060008911611e0b57634e487b7160e01b600052600160045260246000fd5b611e158c33613097565b611e24906402540be400613b96565b611e2f8a6001613a54565b611e399190613b77565b985089891115611e5b5760405162461bcd60e51b81526004016102ee90613a30565b60018c015460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b5050505060005b88811015611f5c578b8181518110611eec57634e487b7160e01b600052603260045260246000fd5b6020026020010151600014611f4a57611f4a338d8381518110611f1f57634e487b7160e01b600052603260045260246000fd5b60200260200101518f600001848154811061096457634e487b7160e01b600052603260045260246000fd5b80611f5481613bd9565b915050611ec4565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385611f8c8e8d613b96565b604051611426949392919061396d565b600080611fb9611fab846125f2565b611fb485612519565b6126a0565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561200d57600080fd5b505afa158015612021573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120459190613885565b9050806120546012600a613acf565b61205e9084613b77565b6120689190613a6c565b949350505050565b815460009082106120935760405162461bcd60e51b81526004016102ee906139d9565b8260030182815481106120b657634e487b7160e01b600052603260045260246000fd5b90600052602060002001548360000183815481106120e457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561213057600080fd5b505afa158015612144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121689190613885565b6106299190613b96565b6060612068848484612e92565b8354600090819083106121a45760405162461bcd60e51b81526004016102ee906139d9565b60006121af87612519565b905060006121bc886125f2565b905060006121ca82846126a0565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561221e57600080fd5b505afa158015612232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122569190613885565b612260838a613b77565b61226a9190613a6c565b6122749083613b96565b905060006122858b868a8786613143565b90508360006122938d612cb0565b905060005b8d548110156123d35760008b8214156122fb578487878a85815181106122ce57634e487b7160e01b600052603260045260246000fd5b60200260200101516122e09190613b77565b6122ea9190613a6c565b6122f49190613b96565b905061236e565b868689848151811061231d57634e487b7160e01b600052603260045260246000fd5b602002602001015161232f9190613b77565b6123399190613a6c565b88838151811061235957634e487b7160e01b600052603260045260246000fd5b602002602001015161236b9190613b96565b90505b6402540be40061237e8285613b77565b6123889190613a6c565b8483815181106123a857634e487b7160e01b600052603260045260246000fd5b602002602001018181516123bc9190613b96565b9052508190506123cb81613bd9565b915050612298565b506123e18d888c8588613143565b828b8151811061240157634e487b7160e01b600052603260045260246000fd5b60200260200101516124139190613b96565b98508c6002018a8154811061243857634e487b7160e01b600052603260045260246000fd5b906000526020600020015460018a6124509190613b96565b61245a9190613a6c565b9850888d6002018b8154811061248057634e487b7160e01b600052603260045260246000fd5b906000526020600020015484888d815181106124ac57634e487b7160e01b600052603260045260246000fd5b60200260200101516124be9190613b96565b6124c89190613a6c565b6124d29190613b96565b97506402540be4006124e48e8e613097565b6124f3906402540be400613b96565b6124fd908b613b77565b6125079190613a6c565b98505050505050505094509492505050565b60008160090154421061252e57506007015490565b81600601548260070154111561259857816008015482600901546125529190613b96565b60088301546125619042613b96565b836006015484600701546125759190613b96565b61257f9190613b77565b6125899190613a6c565b82600601546114489190613a54565b816008015482600901546125ac9190613b96565b60088301546125bb9042613b96565b836007015484600601546125cf9190613b96565b6125d99190613b77565b6125e39190613a6c565b82600601546114489190613b96565b60606114488260030180548060200260200160405190810160405280929190818152602001828054801561264557602002820191906000526020600020905b815481526020019060010190808311612631575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156104b0576020028201919060005260206000209081548152602001906001019080831161049c57505050505061284a565b8151600090816126af856132d3565b9050806126c157600092505050611448565b600081816126cf8588613b77565b905060005b610100811015612801578260005b8a5181101561274657878b828151811061270c57634e487b7160e01b600052603260045260246000fd5b602002602001015161271e9190613b77565b6127288684613b77565b6127329190613a6c565b91508061273e81613bd9565b9150506126e2565b50839450808760016127589190613a54565b6127629190613b77565b60648561276f8287613b96565b6127799190613b77565b6127839190613a6c565b61278d9190613a54565b846127988984613b77565b60646127a48a88613b77565b6127ae9190613a6c565b6127b89190613a54565b6127c29190613b77565b6127cc9190613a6c565b935060016127da8587612ce5565b116127ee5783975050505050505050611448565b50806127f981613bd9565b9150506126d4565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c656400000000000060448201526064016102ee565b606060005b83518110156128ef5783818151811061287857634e487b7160e01b600052603260045260246000fd5b60200260200101518382815181106128a057634e487b7160e01b600052603260045260246000fd5b60200260200101516128b29190613b77565b8382815181106128d257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806128e781613bd9565b91505061284f565b509092915050565b6040516001600160a01b0383166024820152604481018290526115b590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261332d565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561299e57600080fd5b505afa1580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d69190613885565b90506129ed6001600160a01b0385163330866133ff565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a082319060240160206040518083038186803b158015612a2e57600080fd5b505afa158015612a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a669190613885565b6120689190613b96565b600083851415612aae5760405162461bcd60e51b815260206004820152600960248201526839b0b6b2aa37b5b2b760b91b60448201526064016102ee565b85548086108015612abe57508085105b612ada5760405162461bcd60e51b81526004016102ee906139d9565b6000612ae588612519565b90506000612af38383613b77565b90506000612b0186846126a0565b9050600081815b86811015612b97578a811415612b1d57612b85565b60008c8214612b5357898281518110612b4657634e487b7160e01b600052603260045260246000fd5b6020026020010151612b55565b8a5b9050612b618185613a54565b9350612b6d8882613b77565b612b778685613b77565b612b819190613a6c565b9250505b80612b8f81613bd9565b915050612b08565b50612ba28685613b77565b6064612bae8584613b77565b612bb89190613b77565b612bc29190613a6c565b9050600084612bd2606486613b77565b612bdc9190613a6c565b612be69084613a54565b9050600084815b610100811015612c72578192508684836002612c099190613b77565b612c139190613a54565b612c1d9190613b96565b85612c288480613b77565b612c329190613a54565b612c3c9190613a6c565b91506001612c4a8484612ce5565b11612c6057509850610cd7975050505050505050565b80612c6a81613bd9565b915050612bed565b5060405162461bcd60e51b81526020600482015260126024820152711e50d85b18dd5b185d1a5bdb91985a5b195960721b60448201526064016102ee565b8054600090612cc0600182613b96565b612ccb906004613b77565b818460040154612cdb9190613b77565b6106299190613a6c565b6000818311612cfd57612cf88383613b96565b610629565b6106298284613b96565b6001600160a01b038216612d1a57505050565b600a830154612d4a576001600160a01b0382166000908152600c8401602052604090206402540be4009055612e72565b6000612d568484613097565b60018501546040516370a0823160e01b81526001600160a01b038681166004830152929350600092909116906370a082319060240160206040518083038186803b158015612da357600080fd5b505afa158015612db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddb9190613885565b600a860154909150612ded8285613a54565b612df79190613b77565b15612e6f57600a850154612e0b8285613a54565b612e159190613b77565b6402540be40086600a015485612e2b9190613b77565b612e358585613b77565b612e3f9190613a54565b612e499190613b77565b612e539190613a6c565b6001600160a01b0385166000908152600c870160205260409020555b50505b506001600160a01b03166000908152600b90910160205260409020429055565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ee657600080fd5b505afa158015612efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1e9190613885565b905080831115612f705760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c7900000000000060448201526064016102ee565b60006402540be400612f828787613097565b612f91906402540be400613b96565b612f9b9086613b77565b612fa59190613a6c565b865490915060009067ffffffffffffffff811115612fd357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ffc578160200160208202803683370190505b50905060005b875481101561308c57838389600301838154811061303057634e487b7160e01b600052603260045260246000fd5b90600052602060002001546130459190613b77565b61304f9190613a6c565b82828151811061306f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061308481613bd9565b915050613002565b509695505050505050565b6001600160a01b0381166000908152600b8301602052604081205481906130c1906224ea00613a54565b9050428111156131395760006130d74283613b96565b6001600160a01b0385166000908152600c87016020526040902054600a8701549192506402540be400916224ea009184916131129190613b77565b61311c9190613b77565b6131269190613a6c565b6131309190613a6c565b92505050611448565b5060009392505050565b845460009080851061316557634e487b7160e01b600052600160045260246000fd5b60006131718288613b77565b90508360008080805b868110156131fa578a81141561318f576131e8565b8981815181106131af57634e487b7160e01b600052603260045260246000fd5b6020026020010151925082846131c59190613a54565b93506131d18784613b77565b6131db8a87613b77565b6131e59190613a6c565b94505b806131f281613bd9565b91505061317a565b506132058686613b77565b60646132118a87613b77565b61321b9190613b77565b6132259190613a6c565b935060008561323560648b613b77565b61323f9190613a6c565b6132499085613a54565b90508860005b610100811015612801578193508a8383600261326b9190613b77565b6132759190613a54565b61327f9190613b96565b8761328a8480613b77565b6132949190613a54565b61329e9190613a6c565b915060016132ac8584612ce5565b116132c157509750610cd79650505050505050565b806132cb81613bd9565b91505061324f565b6000805b82518110156133275782818151811061330057634e487b7160e01b600052603260045260246000fd5b6020026020010151826133139190613a54565b91508061331f81613bd9565b9150506132d7565b50919050565b6000613382826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661343d9092919063ffffffff16565b8051909150156115b557808060200190518101906133a09190613662565b6115b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102ee565b6040516001600160a01b03808516602483015283166044820152606481018290526134379085906323b872dd60e01b90608401612923565b50505050565b6060612068848460008585843b6134965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ee565b600080866001600160a01b031685876040516134b291906138d7565b60006040518083038185875af1925050503d80600081146134ef576040519150601f19603f3d011682016040523d82523d6000602084013e6134f4565b606091505b509150915061350482828661350f565b979650505050505050565b6060831561351e575081610629565b82511561352e5782518084602001fd5b8160405162461bcd60e51b81526004016102ee91906139a6565b828054828255906000526020600020908101928215613583579160200282015b82811115613583578251825591602001919060010190613568565b5061358f929150613593565b5090565b5b8082111561358f5760008155600101613594565b80356001600160a01b03811681146135bf57600080fd5b919050565b600082601f8301126135d4578081fd5b8135602067ffffffffffffffff808311156135f1576135f1613c0a565b8260051b604051601f19603f8301168101818110848211171561361657613616613c0a565b60405284815283810192508684018288018501891015613634578687fd5b8692505b85831015613656578035845292840192600192909201918401613638565b50979650505050505050565b600060208284031215613673578081fd5b815161062981613c20565b60006020828403121561368f578081fd5b5035919050565b6000806000606084860312156136aa578182fd5b833592506136ba602085016135a8565b9150604084013590509250925092565b600080600080608085870312156136df578081fd5b843593506136ef602086016135a8565b93969395505050506040820135916060013590565b600080600060608486031215613718578283fd5b83359250602084013567ffffffffffffffff811115613735578283fd5b613741868287016135c4565b925050604084013561375281613c20565b809150509250925092565b600080600060608486031215613771578283fd5b83359250602084013567ffffffffffffffff81111561378e578283fd5b61379a868287016135c4565b925050604084013590509250925092565b600080604083850312156137bd578182fd5b50508035926020909101359150565b6000806000606084860312156137e0578283fd5b8335925060208401359150604084013567ffffffffffffffff811115613804578182fd5b613810868287016135c4565b9150509250925092565b6000806000806080858703121561382f578384fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a08688031215613862578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600060208284031215613896578081fd5b5051919050565b6000815180845260208085019450808401835b838110156138cc578151875295820195908201906001016138b0565b509495945050505050565b600082516138e9818460208701613bad565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561392b5783518352928401929184019160010161390f565b50909695505050505050565b60608152600061394a606083018661389d565b828103602084015261395c818661389d565b915050826040830152949350505050565b608081526000613980608083018761389d565b8281036020840152613992818761389d565b604084019590955250506060015292915050565b60208152600082518060208401526139c5816040850160208701613bad565b601f01601f19169190910160400192915050565b6020808252600f908201526e696e6465784f75744f6652616e676560881b604082015260600190565b6020808252601490820152730d2dcecc2d8d2c882dadeeadce8e698cadccee8d60631b604082015260600190565b6020808252600a90820152693e20736c69707061676560b01b604082015260600190565b60008219821115613a6757613a67613bf4565b500190565b600082613a8757634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115613ac7578160001904821115613aad57613aad613bf4565b80851615613aba57918102915b93841c9390800290613a91565b509250929050565b60006106298383600082613ae557506001611448565b81613af257506000611448565b8160018114613b085760028114613b1257613b2e565b6001915050611448565b60ff841115613b2357613b23613bf4565b50506001821b611448565b5060208310610133831016604e8410600b8410161715613b51575081810a611448565b613b5b8383613a8c565b8060001904821115613b6f57613b6f613bf4565b029392505050565b6000816000190483118215151615613b9157613b91613bf4565b500290565b600082821015613ba857613ba8613bf4565b500390565b60005b83811015613bc8578181015183820152602001613bb0565b838111156134375750506000910152565b6000600019821415613bed57613bed613bf4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114613c2e57600080fd5b5056fea264697066735822122076ab2ef9a2832912953b1286c23d999eac79d6e95460da8fad2fe346eaa5753664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}